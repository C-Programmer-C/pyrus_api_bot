'use strict';

const FormFieldType = {
    Unknown: "unknown",
    Text: "text",
    Money: "money",
    Number: "number",
    Date: "date",
    Time: "time",
    Checkmark: "checkmark",
    MultipleChoice: "multiple_choice",
    DueDate: "due_date",
    Email: "email",
    Phone: "phone",
    Flag: "flag",
    Step: "step",
    Status: "status",
    CreationDate: "creation_date",
    Note: "note",
    Catalog: "catalog",
    File: "file",
    Person: "person",
    Author: "author",
    Table: "table",
    Title: "title",
    Project: "project",
    FormLink: "form_link",
    DueDateTime: "due_date_time",
};

const dateTimeFieldTypes = [
    FormFieldType.DueDateTime,
    FormFieldType.CreationDate,
];
const dateFieldTypes = [FormFieldType.Date, FormFieldType.DueDate];
const timeFieldTypes = [FormFieldType.Time];
const allDateAndTimeFieldTypes = [
    ...dateFieldTypes,
    ...dateTimeFieldTypes,
    ...timeFieldTypes,
];
const allDateAndTimeResponseKeys = [
    "create_date",
    "last_modified_date",
    "due_date",
    "due",
    "scheduled_date",
    "scheduled_datetime_utc",
    "close_date",
];
const dateRequestKeys = ["due_date", "scheduled_date"];
const dateTimeRequestKeys = [
    "start_date_utc",
    "end_date_utc",
    "modified_before",
    "modified_after",
    "created_before",
    "created_after",
    "closed_before",
    "closed_after",
    "due",
    "scheduled_datetime_utc",
    "start_time",
    "end_time",
];

exports.OperatorId = void 0;
(function (OperatorId) {
    OperatorId[OperatorId["Equals"] = 1] = "Equals";
    OperatorId[OperatorId["LessThan"] = 2] = "LessThan";
    OperatorId[OperatorId["GreaterThan"] = 3] = "GreaterThan";
    OperatorId[OperatorId["IsIn"] = 4] = "IsIn";
    OperatorId[OperatorId["Range"] = 5] = "Range";
    OperatorId[OperatorId["MatchPrefix"] = 6] = "MatchPrefix";
    OperatorId[OperatorId["IsEmpty"] = 7] = "IsEmpty";
})(exports.OperatorId || (exports.OperatorId = {}));

function toSearchParams(request) {
    return ("?" +
        new URLSearchParams(Object.entries(request).map(([key, value]) => {
            if (value instanceof Date) {
                if (dateTimeRequestKeys.includes(key))
                    return [key, toDateTimeString(value)];
                if (dateRequestKeys.includes(key))
                    return [key, toDateString(value)];
            }
            return [key, value];
        })).toString());
}
function extractDates(key, value) {
    if (value instanceof Object && value.type && value.value) {
        if (allDateAndTimeFieldTypes.includes(value.type)) {
            value.value = new Date(value.value);
        }
        return value;
    }
    if (allDateAndTimeResponseKeys.includes(key)) {
        value = value && new Date(value);
    }
    return value;
}
function packDates(key, value) {
    if (dateRequestKeys.includes(key)) {
        return value && toDateString(value);
    }
    if (dateTimeRequestKeys.includes(key)) {
        return value && toDateTimeString(value);
    }
    if (value instanceof Object && value.type && value.value) {
        if (dateTimeFieldTypes.includes(value.type)) {
            value.value = toDateTimeString(value.value);
            return value;
        }
        if (dateFieldTypes.includes(value.type)) {
            value.value = toDateString(value.value);
            return value;
        }
        if (timeFieldTypes.includes(value.type)) {
            value.value = toTimeString(value.value);
            return value;
        }
    }
    return value;
}
function toJson(obj) {
    return JSON.stringify(obj, packDates);
}
function fromJson(str) {
    return JSON.parse(str, extractDates);
}
function trimTrailingSlash(url) {
    return url.endsWith("/") ? url.slice(0, -1) : url;
}
function toDateTimeString(date) {
    if (typeof date !== "string")
        date = date.toISOString();
    return date.split(".")[0] + "Z";
}
function toDateString(date) {
    if (typeof date !== "string")
        date = date.toISOString();
    return date.split("T")[0];
}
function toTimeString(date) {
    if (typeof date !== "string")
        date = date.toISOString();
    return date.split("T")[1].slice(0, 5);
}
function processFilters(filters) {
    if (!filters)
        return {};
    return filters.reduce((prev, { operator_id, values, field_id }) => {
        switch (operator_id) {
            case exports.OperatorId.Equals:
            case exports.OperatorId.MatchPrefix:
                prev[`fld${field_id}`] = values[0];
                break;
            case exports.OperatorId.LessThan:
                prev[`fld${field_id}`] = `lt${values[0]}`;
                break;
            case exports.OperatorId.GreaterThan:
                prev[`fld${field_id}`] = `gt${values[0]}`;
                break;
            case exports.OperatorId.IsIn:
                prev[`fld${field_id}`] = values.join(",");
                break;
            case exports.OperatorId.Range:
                prev[`fld${field_id}`] = `gt${values[0]},lt${values[1]}`;
                break;
            case exports.OperatorId.IsEmpty:
                prev[`fld${field_id}`] = "empty";
                break;
            default:
                return prev;
        }
        return prev;
    }, {});
}
function prepareHeadersForCatalogApiRequest(headers) {
    return headers.map((header) => typeof header === "string" ? header : header.name);
}

class ApiError extends Error {
    constructor({ code, error }) {
        const message = `${code} (${error.error_code}) - ${error.error}`;
        super(message);
        this.name = "ApiError";
        this.errorCode = error.error_code;
    }
}

const FilterMask = {
    Due: 0x1,
    DueDate: 0x2,
    DueForCurrentStep: 0x4,
    Reminded: 0x8,
};

const CallEventType = {
    Show: "show",
};

const SourceType = {
    Default: "default",
    FillTable: "fill_table",
};

const ActivityAction = {
    Finished: "finished",
    Reopened: "reopened",
};

const ApprovalChoice = {
    Waiting: "waiting",
    Approved: "approved",
    Rejected: "rejected",
    Revoked: "revoked",
    Acknowledged: "acknowledged",
};

exports.PersonRights = void 0;
(function (PersonRights) {
    PersonRights[PersonRights["None"] = 0] = "None";
    PersonRights[PersonRights["ManageRoles"] = 1] = "ManageRoles";
    PersonRights[PersonRights["CanSeeAllTasks"] = 2] = "CanSeeAllTasks";
    PersonRights[PersonRights["ManagePersonsInOrganization"] = 4] = "ManagePersonsInOrganization";
    PersonRights[PersonRights["EditOrganizationProjects"] = 8] = "EditOrganizationProjects";
    PersonRights[PersonRights["EditOrganizationSettings"] = 16] = "EditOrganizationSettings";
    PersonRights[PersonRights["DeleteMyTasksAndProjects"] = 32] = "DeleteMyTasksAndProjects";
    PersonRights[PersonRights["CloseDeleteAnnouncements"] = 64] = "CloseDeleteAnnouncements";
    PersonRights[PersonRights["BillsPayment"] = 128] = "BillsPayment";
    PersonRights[PersonRights["InvitePersonsToOrganization"] = 256] = "InvitePersonsToOrganization";
    PersonRights[PersonRights["DeleteOtherMembersTasks"] = 512] = "DeleteOtherMembersTasks";
    PersonRights[PersonRights["ManageIntegrationsAndCatalogs"] = 1024] = "ManageIntegrationsAndCatalogs";
    PersonRights[PersonRights["CreateAnnouncement"] = 2048] = "CreateAnnouncement";
    PersonRights[PersonRights["CanDeleteTaskFlagEquivalent"] = 544] = "CanDeleteTaskFlagEquivalent";
    PersonRights[PersonRights["SupervisorRights"] = 221] = "SupervisorRights";
    PersonRights[PersonRights["MaxAdditionalRights"] = 2047] = "MaxAdditionalRights";
    PersonRights[PersonRights["NewOrganizationDefaultRights"] = 2080] = "NewOrganizationDefaultRights";
    PersonRights[PersonRights["UIOrganizationManager"] = 277] = "UIOrganizationManager";
    PersonRights[PersonRights["UIAccountant"] = 128] = "UIAccountant";
    PersonRights[PersonRights["UISupervisor"] = 10] = "UISupervisor";
    PersonRights[PersonRights["UIConfigurationManager"] = 1600] = "UIConfigurationManager";
    PersonRights[PersonRights["UIAdministrator"] = 2015] = "UIAdministrator";
})(exports.PersonRights || (exports.PersonRights = {}));

const ListType = {
    Private: "private",
    OrganizationWide: "org_wide",
};

const ErrorCodeType = {
    ServerError: "server_error",
    AuthorizationError: "authorization_error",
    TokenNotSpecified: "token_not_specified",
    RevokedToken: "revoked_token",
    ExpiredToken: "expired_token",
    InvalidToken: "invalid_token",
    AccountBlocked: "account_blocked",
    InvalidCredentials: "invalid_credentials",
    InvalidApplicationId: "invalid_application_id",
    InvalidFieldId: "invalid_field_id",
    InvalidFieldName: "invalid_field_name",
    InvalidFieldIdName: "invalid_field_id_name",
    NonUniqueName: "non_unique_name",
    FieldIdentityMissing: "field_identity_missing",
    DuplicateField: "duplicate_field",
    InvalidCatalogId: "invalid_catalog_id",
    InvalidCatalogItemName: "invalid_catalog_item_name",
    NonUniqueCatalogItemName: "non_unique_catalog_item_name",
    InvalidCatalogItemId: "invalid_catalog_item_id",
    InvalidCatalogItemIdName: "catalog_item_id_name_mismatch",
    InvalidEmail: "invalid_email",
    NonUniqueEmail: "non_unique_email",
    InvalidPersonIdEmail: "invalid_person_id_email",
    UnrecognizedAttachmentId: "unrecognized_attachment_id",
    RequiredFieldMissing: "required_field_missing",
    FieldTypeIsNotSupported: "type_is_not_supported",
    IncorrectParametersCount: "incorrect_parameters_count",
    FilterTypeIsNotSupported: "filter_type_is_not_supported",
    StepFieldDoesNotExists: "step_field_does_not_exists",
    NoFileInRequest: "no_file_in_request",
    TooLargeRequestLength: "too_large_request_length",
    TaskHasNoForm: "task_has_no_form",
    RequiredParameterMissing: "required_parameter_missing",
    InvalidValueFormat: "invalid_value_format",
    InvalidJson: "invalid_json",
    EmptyBody: "empty_body",
    TextMissing: "text_missing",
    FormIdMissing: "form_id_missing",
    InvalidPersonId: "invalid_person_id",
    DeletedField: "deleted_field",
    PersonIdentityMissing: "person_identity_missing",
    CatalogItemIdMissing: "catalog_identity_missing",
    FormHasNoTask: "form_has_no_task",
    EitherDueDateOrDueCanBeSet: "either_due_date_or_due_can_be_set",
    NegativeDuration: "negative_duration",
    DurationIsTooLong: "duration_is_too_long",
    DueMissing: "due_missing",
    ScheduledDateInPast: "scheduled_date_in_past",
    CannotAddFormProject: "cannot_add_form_project",
    FormTemplateCantBeRemovedFromTask: "form_template_cant_be_removed_from_task",
    TooManyTaskSteps: "too_many_task_steps",
    TooManyComments: "too_many_comments",
    InvalidStepNumber: "invalid_step_number",
    TaskLimitExceeded: "task_limit_exceeded",
    FieldIsInTable: "field_is_in_table",
    RequiredTableFieldMissing: "required_table_field_missing",
    DepartmentCatalogCanNotBeModified: "department_catalog_can_not_be_modified",
    CatalogDuplicateItems: "catalog_duplicate_rows",
    EmptyCatalogHeaders: "empty_catalog_headers",
    CanNotModifyDeletedCatalog: "can_not_modify_deleted_catalog",
    CatalogDuplicateHeaders: "catalog_duplicate_headers",
    CanNotModifyFirstColumn: "can_not_modify_first_column",
    CatalogHeadersItemsMismatch: "catalog_headers_items_mismatch",
    TooManyCatalogItems: "too_many_catalog_items",
    CatalogItemMaxLengthExceeded: "catalog_item_max_length_exceeded",
    SingleValueIsNotSupported: "single_value_is_not_supported",
    ParticipantLimitExceeded: "participant_limit_exceeded",
    TableRowsLimitExceeded: "table_rows_limit_exceeded",
    TextFieldValueLimitExceeded: "text_field_value_limit_exceeded",
    UnableToEditField: "unable_to_edit_field",
    EmptyFile: "empty_file",
    BadMultipartContent: "bad_multipart_content",
    TooManyDecimalPlaces: "too_many_decimal_places",
    ExternalCommentEmptyText: "external_comment_empty_text",
    SenderAddressFieldMissing: "sender_address_field_missing",
    ExternalCommentRecipientNotFound: "external_comment_recipient_not_found",
    DefaultMailboxNotFound: "default_mailbox_not_found",
    CatalogNullValue: "catalog_null_value",
    MaxTextLengthExceeded: "max_text_length_exceeded",
    DueOutsideOfBounds: "due_outside_of_bounds",
    AttachmentsForbidden: "attachments_forbidden",
    UnrecognizedCallGuid: "unrecognized_call_guid",
    UnsupportedAttachmentFormat: "unsupported_attachment_format",
    ValidationError: "validation_error",
    UnrecognizedAccountId: "unrecognized_account_id",
    WebhookIsDisabled: "webhook_is_disabled",
    TooLargeMessageText: "too_large_message_text",
    UnrecognizedMessageType: "unrecognized_message_type",
    InvalidFieldMappingCode: "invalid_field_mapping_code",
    TooManyAttachments: "too_many_attachments",
    UnrecognizedCallId: "unrecognized_call_id",
    UnsupportedRecordFileFormat: "unsupported_record_file_format",
    UnrecognizedIntegrationGuid: "unrecognized_integration_guid",
    LimitExceeded: "limit_exceeded",
    MaxSmsTextLengthExceeded: "max_sms_text_length_exceeded",
    SmsIntegrationNotConfigured: "sms_integration_not_configured",
    AttachmentTooBig: "attachment_too_big",
    UncreatedOrDeletedTableRows: "invalid_table_row",
    PrivateChannelAccessDenied: "private_channel_access_denied",
    PrivateCommentHasForbiddenChanges: "private_comment_has_forbidden_changes",
    ItemsCountOutOfRange: "items_count_out_of_range",
    CannotAddExternalUser: "cannot_add_external_user",
    UnrecognizedTaskId: "unrecognized_task_id",
    TooManyDeletedCatalogItems: "too_many_deleted_catalog_items",
    FieldCannotHaveMultipleValues: "field_cannot_have_multiple_values",
    FieldEditingIsNotAllowed: "field_editing_is_not_allowed",
    NonUniqueCode: "non_unique_code",
    InvalidFieldCode: "invalid_field_code",
    AccessDeniedProject: "access_denied_project",
    AccessDeniedTask: "access_denied_task",
    AccessDeniedCatalog: "access_denied_catalog",
    AccessDeniedForm: "access_denied_form",
    AccessDeniedPerson: "access_denied_person",
    AccessDeniedCloseTask: "access_denied_close_task",
    AccessDeniedReopenTask: "access_denied_reopen_task",
    AccessDeniedFileAccessHistory: "access_denied_file_access_history",
    AccessDeniedFile: "access_denied_file",
    AccessDeniedReport: "access_denied_report",
    AccessDenied: "access_denied",
    FileIsMissing: "file_is_missing",
    TooManyRequests: "too_many_requests",
};

const Flag = {
    None: "none",
    Checked: "checked",
    Unchecked: "unchecked",
};

const PermissionLevel = {
    None: "none",
    Manager: "manager",
    Member: "member",
    Administrator: "administrator",
};

const PersonType = {
    User: "user",
    Bot: "bot",
    Role: "role",
};

const SendSmsError = {
    None: "none",
    Unknown: "unknown",
    Expired: "expired",
    Forbidden: "forbidden",
    Unreachable: "unreachable",
    UnknownStatus: "unknown_status",
    UnableToDeliver: "unable_to_deliver",
    InvalidPhoneNumber: "invalid_phone_number",
    Rejected: "rejected",
};

const SendSmsStatus = {
    Sent: "sent",
    Delivered: "delivered",
    DeliveryFailed: "delivery_failed",
    SendFailed: "send_failed",
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

class BaseApi {
    constructor({ token, authRequest, settings }) {
        this._authRequest = null;
        this._moduleSubPath = "";
        if (token)
            this._token = token;
        if (authRequest)
            this._authRequest = authRequest;
        if (settings) {
            this._settings = settings;
        }
    }
    loginDone() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!this._authRequest) {
                return;
            }
            const { access_token, api_url, files_url } = yield this._authRequest;
            this._token = access_token;
            if (api_url && files_url) {
                this._settings.apiUrl = trimTrailingSlash(api_url);
                this._settings.filesUrl = trimTrailingSlash(files_url);
            }
            else {
                this._settings.apiUrl =
                    (_a = this._settings.apiUrl) !== null && _a !== void 0 ? _a : this._settings.authUrl;
                if (!this._settings.filesUrl) {
                    const authUrl = new URL(this._settings.authUrl);
                    this._settings.filesUrl = authUrl.origin;
                }
            }
            this._authRequest = null;
        });
    }
    fetchApi(url, method, body, headersOverride) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginDone();
            const resp = yield fetch(url, {
                method: method,
                headers: headersOverride || (yield this.defaultHeaders()),
                body: body,
            });
            return (yield this._checkResponse(resp));
        });
    }
    _checkResponse(resp) {
        return __awaiter(this, void 0, void 0, function* () {
            if (resp.ok) {
                const contentType = resp.headers.get("Content-Type");
                if (contentType && contentType.includes("application/json")) {
                    return fromJson(yield resp.text());
                }
                return yield resp.blob();
            }
            else {
                const error = (yield resp.json());
                throw new ApiError({ code: resp.status, error });
            }
        });
    }
    getModulePath() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginDone();
            return this._settings.apiUrl + this._moduleSubPath;
        });
    }
    authorisationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginDone();
            return {
                Authorization: `Bearer ${this._token}`,
            };
        });
    }
    defaultHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            return Object.assign(Object.assign({}, (yield this.authorisationHeader())), { "Content-Type": "application/json" });
        });
    }
}

var Endpoints;
(function (Endpoints) {
    Endpoints["Auth"] = "/auth";
    Endpoints["Roles"] = "/roles";
    Endpoints["Profile"] = "/profile";
    Endpoints["Contacts"] = "/contacts";
    Endpoints["Files"] = "/files";
    Endpoints["V4"] = "/v4";
    Endpoints["Upload"] = "/upload";
    Endpoints["Download"] = "/download";
    Endpoints["Lists"] = "/lists";
    Endpoints["Inbox"] = "/inbox";
    Endpoints["ListTasks"] = "/tasks";
    Endpoints["Calendar"] = "/calendar";
    Endpoints["Announcements"] = "/announcements";
    Endpoints["AnnouncementComments"] = "/comments";
    Endpoints["Catalogs"] = "/catalogs";
    Endpoints["Members"] = "/members";
    Endpoints["Tasks"] = "/tasks";
    Endpoints["TasksComments"] = "/comments";
    Endpoints["Forms"] = "/forms";
    Endpoints["FormsRegister"] = "/register";
    Endpoints["FormsPermissions"] = "/permissions";
    Endpoints["EventHistory"] = "/eventhistory";
    Endpoints["FileAccessHistory"] = "/fileaccesshistory";
    Endpoints["TaskAccessHistory"] = "/taskaccesshistory";
    Endpoints["TaskExportHistory"] = "/taskexporthistory";
    Endpoints["RegistryDownloadHistory"] = "/registrydownloadhistory";
    Endpoints["Integrations"] = "/integrations";
    Endpoints["Call"] = "/call";
    Endpoints["AttachCallRecord"] = "/attachcallrecord";
    Endpoints["Bots"] = "/bots";
})(Endpoints || (Endpoints = {}));

class RoleApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Roles;
    }
    create(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "POST", JSON.stringify(request));
        });
    }
    get(_a) {
        return __awaiter(this, arguments, void 0, function* ({ id }) {
            return yield this.fetchApi((yield this.getModulePath()) + `/${id}`, "GET");
        });
    }
    getAll(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi((yield this.getModulePath()) + searchParams, "GET");
        });
    }
    update(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) + `/${request.id}`, "PUT", JSON.stringify(request));
        });
    }
}

const defaults = {
    authUrl: "https://accounts.pyrus.com/api/v4",
    apiUrl: "https://api.pyrus.com/v4",
    filesUrl: "https://files.pyrus.com",
};

class ProfileApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Profile;
    }
    get(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi((yield this.getModulePath()) + searchParams, "GET");
        });
    }
}

class ContactsApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Contacts;
    }
    getAll(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi((yield this.getModulePath()) + searchParams, "GET");
        });
    }
}

class FilesApi extends BaseApi {
    upload(file, filename) {
        return __awaiter(this, void 0, void 0, function* () {
            const formData = new FormData();
            formData.append(filename, file, filename);
            return yield this.fetchApi((yield this._filePath()) + Endpoints.Upload, "POST", formData, yield this.authorisationHeader());
        });
    }
    download(_a) {
        return __awaiter(this, arguments, void 0, function* ({ id }) {
            return yield this.fetchApi((yield this._filePath()) + Endpoints.Download + `/${id}`, "GET");
        });
    }
    _filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginDone();
            if (this._settings.filesUrl)
                return this._settings.filesUrl + Endpoints.V4 + Endpoints.Files;
            return this._settings.apiUrl + Endpoints.Files;
        });
    }
}

class ListsApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Lists;
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "GET");
        });
    }
    getTasksInList(listId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi((yield this.getModulePath()) +
                `/${listId}` +
                Endpoints.ListTasks +
                searchParams, "GET");
        });
    }
    getInbox(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginDone();
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi(this._settings.apiUrl + Endpoints.Inbox + searchParams, "GET");
        });
    }
    create(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "PUT", JSON.stringify(request));
        });
    }
    get(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) +
                `/${request.id}`, "GET");
        });
    }
    delete(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) + `/${request.id}`, "DELETE", JSON.stringify(request));
        });
    }
    update(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) + `/${request.id}`, "POST", JSON.stringify(request));
        });
    }
}

class CalendarApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Calendar;
    }
    getTasks(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) + toSearchParams(request), "GET");
        });
    }
}

class AnnouncementsApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Announcements;
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "GET");
        });
    }
    get(_a) {
        return __awaiter(this, arguments, void 0, function* ({ id }) {
            return yield this.fetchApi((yield this.getModulePath()) + `/${id}`, "GET");
        });
    }
    create(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "POST", JSON.stringify(request));
        });
    }
    addComment(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) +
                `/${id}` +
                Endpoints.AnnouncementComments, "POST", JSON.stringify(request));
        });
    }
}

class CatalogsApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Catalogs;
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "GET");
        });
    }
    get(_a) {
        return __awaiter(this, arguments, void 0, function* ({ id }) {
            return yield this.fetchApi((yield this.getModulePath()) + `/${id}`, "GET");
        });
    }
    create(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "PUT", JSON.stringify(request));
        });
    }
    sync(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const apiRequest = Object.assign(Object.assign({}, request), { catalog_headers: prepareHeadersForCatalogApiRequest(request.catalog_headers) });
            return yield this.fetchApi((yield this.getModulePath()) + `/${request.id}`, "POST", JSON.stringify(apiRequest));
        });
    }
}

class MembersApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Members;
    }
    create(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "POST", JSON.stringify(request));
        });
    }
    get(_a) {
        return __awaiter(this, arguments, void 0, function* ({ id }) {
            return yield this.fetchApi((yield this.getModulePath()) + `/${id}`, "GET");
        });
    }
    getAll(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi((yield this.getModulePath()) + searchParams, "GET");
        });
    }
    update(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) + `/${request.id}`, "PUT", JSON.stringify(request));
        });
    }
    delete(_a) {
        return __awaiter(this, arguments, void 0, function* ({ id }) {
            return yield this.fetchApi((yield this.getModulePath()) + `/${id}`, "DELETE");
        });
    }
}

class TasksApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Tasks;
    }
    get(_a) {
        return __awaiter(this, arguments, void 0, function* ({ id }) {
            return yield this.fetchApi((yield this.getModulePath()) + `/${id}`, "GET");
        });
    }
    create(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "POST", toJson(request));
        });
    }
    addComment(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) + `/${id}` + Endpoints.TasksComments, "POST", toJson(request));
        });
    }
}

class FormsApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Forms;
    }
    get(_a) {
        return __awaiter(this, arguments, void 0, function* ({ id }) {
            return yield this.fetchApi((yield this.getModulePath()) + `/${id}`, "GET");
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "GET");
        });
    }
    getTasks(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const processedRequest = Object.assign(Object.assign({}, request), processFilters(request && request.filters));
            if (processedRequest.filters)
                delete processedRequest.filters;
            return yield this.fetchApi((yield this.getModulePath()) + `/${id}` + Endpoints.FormsRegister, "POST", toJson(processedRequest));
        });
    }
    getPermissions(_a) {
        return __awaiter(this, arguments, void 0, function* ({ id }) {
            return yield this.fetchApi((yield this.getModulePath()) +
                `/${id}` +
                Endpoints.FormsPermissions, "GET");
        });
    }
    setPermissions(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) +
                `/${id}` +
                Endpoints.FormsPermissions, "POST", JSON.stringify(request));
        });
    }
}

class LogsApi extends BaseApi {
    getEvents(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginDone();
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi(this._settings.apiUrl + Endpoints.EventHistory + searchParams, "GET");
        });
    }
    getFileAccess(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginDone();
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi(this._settings.apiUrl + Endpoints.FileAccessHistory + searchParams, "GET");
        });
    }
    getTaskAccess(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginDone();
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi(this._settings.apiUrl + Endpoints.TaskAccessHistory + searchParams, "GET");
        });
    }
    getTaskExport(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginDone();
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi(this._settings.apiUrl + Endpoints.TaskExportHistory + searchParams, "GET");
        });
    }
    getRegistryDownload(request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loginDone();
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi(this._settings.apiUrl +
                Endpoints.RegistryDownloadHistory +
                searchParams, "GET");
        });
    }
}

class CallApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Integrations;
    }
    registerCall(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) + Endpoints.Call, "POST", JSON.stringify(request));
        });
    }
    attachCallRecord(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) + Endpoints.AttachCallRecord, "POST", JSON.stringify(request));
        });
    }
}

class BotApi extends BaseApi {
    constructor() {
        super(...arguments);
        this._moduleSubPath = Endpoints.Bots;
    }
    create(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi(yield this.getModulePath(), "POST", JSON.stringify(request));
        });
    }
    getAll(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchParams = request ? toSearchParams(request) : "";
            return yield this.fetchApi((yield this.getModulePath()) + searchParams, "GET");
        });
    }
    update(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) + `/${request.id}`, "PUT", JSON.stringify(request));
        });
    }
    delete(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.fetchApi((yield this.getModulePath()) + `/${request.id}`, "DELETE", JSON.stringify(request));
        });
    }
}

class PyrusApiClient extends BaseApi {
    constructor(auth, settings) {
        const currentSettings = !!settings
            ? PyrusApiClient.extendDefaults(settings)
            : defaults;
        super({ settings: currentSettings });
        if (typeof auth === "string")
            this._token = auth;
        else
            this._authRequest = this._authenticateClient(auth);
    }
    _authenticateClient(auth) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.fetchApi(this._settings.authUrl + Endpoints.Auth, "POST", JSON.stringify(auth), {
                "Content-Type": "application/json",
            });
        });
    }
    static extendDefaults(settings) {
        const extendedSettings = Object.assign(Object.assign({}, defaults), settings);
        const needTrimKeys = [
            "apiUrl",
            "authUrl",
            "filesUrl",
        ];
        for (const key of needTrimKeys) {
            extendedSettings[key] = trimTrailingSlash(extendedSettings[key]);
        }
        return extendedSettings;
    }
    get initParams() {
        return {
            authRequest: this._authRequest,
            token: this._token,
            settings: this._settings,
        };
    }
    get role() {
        if (!this._role)
            this._role = new RoleApi(this.initParams);
        return this._role;
    }
    get profile() {
        if (!this._profile)
            this._profile = new ProfileApi(this.initParams);
        return this._profile;
    }
    get contacts() {
        if (!this._contacts)
            this._contacts = new ContactsApi(this.initParams);
        return this._contacts;
    }
    get files() {
        if (!this._files)
            this._files = new FilesApi(this.initParams);
        return this._files;
    }
    get lists() {
        if (!this._lists)
            this._lists = new ListsApi(this.initParams);
        return this._lists;
    }
    get calendar() {
        if (!this._calendar)
            this._calendar = new CalendarApi(this.initParams);
        return this._calendar;
    }
    get announcements() {
        if (!this._announcements)
            this._announcements = new AnnouncementsApi(this.initParams);
        return this._announcements;
    }
    get catalogs() {
        if (!this._catalogs)
            this._catalogs = new CatalogsApi(this.initParams);
        return this._catalogs;
    }
    get members() {
        if (!this._members)
            this._members = new MembersApi(this.initParams);
        return this._members;
    }
    get tasks() {
        if (!this._tasks)
            this._tasks = new TasksApi(this.initParams);
        return this._tasks;
    }
    get forms() {
        if (!this._forms)
            this._forms = new FormsApi(this.initParams);
        return this._forms;
    }
    get logs() {
        if (!this._logs)
            this._logs = new LogsApi(this.initParams);
        return this._logs;
    }
    get call() {
        if (!this._call)
            this._call = new CallApi(this.initParams);
        return this._call;
    }
    get bot() {
        if (!this._bot)
            this._bot = new BotApi(this.initParams);
        return this._bot;
    }
}

exports.ActivityAction = ActivityAction;
exports.ApiError = ApiError;
exports.ApprovalChoice = ApprovalChoice;
exports.CallEventType = CallEventType;
exports.ErrorCodeType = ErrorCodeType;
exports.FilterMask = FilterMask;
exports.Flag = Flag;
exports.FormFieldType = FormFieldType;
exports.ListType = ListType;
exports.PermissionLevel = PermissionLevel;
exports.PersonType = PersonType;
exports.PyrusApiClient = PyrusApiClient;
exports.SendSmsError = SendSmsError;
exports.SendSmsStatus = SendSmsStatus;
exports.SourceType = SourceType;
exports.fromJson = fromJson;
exports.prepareHeadersForCatalogApiRequest = prepareHeadersForCatalogApiRequest;
exports.toDateString = toDateString;
exports.toDateTimeString = toDateTimeString;
exports.toJson = toJson;
exports.toTimeString = toTimeString;
